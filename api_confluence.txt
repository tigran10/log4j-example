h1. Table of Contents
* [API Standards Guide|#api-standards-guide]
  * [Introduction|#introduction]
  * [URL Paths|#url-paths]
  * [Query Parameters|#query-parameters]
  * [Versioning|#versioning]
  * [Pagination and Partial Response|#pagination-and-partial-response]
  * [Attribute Naming|#attribute-naming]
  * [Tips for Search|#tips-for-search]
  * [Handling Errors|#handling-errors]
  * [Tips for Handling Exceptional Behavior|#tips-for-handling-exceptional-behavior]


h1. API Standards Guide

#h1. Introduction
Our API is designed for simplicity, consistency, and developer experience. The primary response structure includes `data` for main content and `meta` for metadata, such as pagination details. These standards ensure predictable and developer-friendly APIs.

---

#h1. URL Paths
* _Use Nouns_: Use nouns to describe resources (e.g., `/appointments`, `/patients`).
* _Avoid Verbs_: Avoid verbs in paths unless representing an action-based endpoint without a specific resource (e.g., `/convert` for currency conversion).
* _Plural Nouns_: Use plural nouns for collections (e.g., `/appointments`) and singular nouns for single resources (`/appointments/{id}`).
* _Concrete Names_: Prefer specific, concrete names like `/appointments` instead of ambiguous terms like `/items`.

---

#h1. Query Parameters
* _Pagination_: Use `page` and `per_page` parameters for pagination.
  * Example: `GET /api/v1/appointments?page=2&per_page=20`
* _Filtering and Search_: Include filter parameters directly in the query string for relevant resource types.
  * _Appointment Slot Filtering_: To filter available appointments by specific criteria, such as date range, practitioner gender, or appointment format, use a structure like this:
    {code}
    GET /api/v1/appointments/slots?appointment-format=audio_only&practitioner-gender=female&from-date=2024-10-10&to-date=2024-10-24
    {code}
  * _Practitioner Search_: Use a similar structure for filtering practitioners based on specific requirements:
    {code}
    GET /api/v1/appointments/practitioners/genders?service-category=8&service-type=142&appointment-format=audio_only
    {code}
* _Sorting_: Use a `sort` parameter with a minus sign (`-`) for descending order. If no sign is provided, the sort order is ascending.
  * Example: `GET /api/v1/appointments?sort=-start_time` (descending by `start_time`)
* _Including Related Data_: Use the `include` parameter to embed related resources, like doctor or patient details, directly in the response.
  * Example: `GET /api/v1/appointments?include=doctor`

---

#h1. Versioning
* _URL-Based Versioning_: Place the version number at the beginning of the URL path.
  * Example: `GET /api/v1/appointments`
* _Simple Ordinal Versions_: Use versions like `v1`, `v2`, without minor versions like `v1.1`.

---

#h1. Pagination and Partial Response
* _Response Structure for Collections_: For lists, wrap data in a `data` array and include pagination metadata in a `meta` object.
  {code}json
  {
    "data": [
      { "appointment_id": "123", "date": "2024-10-10", "time": "10:00", ... },
      { "appointment_id": "124", "date": "2024-10-10", "time": "11:00", ... }
    ],
    "meta": {
      "current_page": 1,
      "last_page": 10,
      "per_page": 10,
      "from": 1,
      "to": 10,
      "total": 100,
      "links": {
        "previous": null,
        "next": "/api/v1/appointments?page=2"
      }
    }
  }

* _Single Resource Response_: For single items, wrap the data in a data object.

{code}json
{
  "data": {
    "appointment_id": "123",
    "patient_id": "456",
    "doctor": { "id": "789", "name": "Dr. Smith" },
    ...
  }
}
{code} 
* _Partial Responses_: Use a fields parameter to specify only the fields required in the response.
{code}json
{
  "data": {
    "appointment_id": "123",
    "patient_id": "456",
    "doctor": { "id": "789", "name": "Dr. Smith" },
    ...
  }
}
{code}


#h1. Attribute Naming

* _JSON Naming Conventions_: Use camelCase for attribute names to align with JavaScript conventions.
* _Avoid Special Characters_: Stick to letters and numbers for compatibility across systems.
* _Consistency: Use the same_: attribute names across endpoints (e.g., startTime across resources to represent appointment start time).

#h1. Tips for Search

* _Global and Scoped Search_: Use `q` for general search terms. For scoped search within a resource, specify the relevant field.
* _Example (Global Search)_: `GET /api/v1/search?q=patient`
* _Example (Scoped Search)_: `GET /api/v1/appointments?q=completed`

Handling Errors
* _Standard Error Structure_: Refer to our Error Response Guide for detailed error-handling standards. Example error structure:

{code}json
{
  "errors": [
    {
      "type": "ValidationError",
      "field": "appointment_date",
      "message": "The appointment date must be a valid date.",
      "code": "4001"
    }
  ],
  "status_code": 400,
  "reason_phrase": "Validation Error"
}
{code}


#h1. Tips for Handling Exceptional Behavior

* _Fallback Handling_: In cases where clients canâ€™t handle certain _HTTP_ status codes, consider returning a `200` status code with a descriptive errors object in the response payload.
* _Suppress Response Codes (if necessary)_: For certain client limitations, provide optional parameters (e.g., `suppress_response_codes=true`) to avoid displaying errors directly.

