User Story 1: Retrieve Proposed Appointments

As a healthcare provider system,
I want to implement an API endpoint to retrieve proposed appointments from Meddbase and map them to FHIR-compliant Appointment resources,
So that I can integrate with Booking Service and support appointment scheduling.

Acceptance Criteria:
	•	Implement an HTTP POST FHIR API /Appointment endpoint compliant with FHIR R4 standards using the HAPI FHIR library.
	•	Call Meddbase’s /getProposedAppointment API with the required parameters and retrieve proposed appointments.
	•	Validate that at least one proposed appointment is returned. Select the first one if multiple are available.
	•	Map the retrieved Meddbase appointment data to a FHIR-compliant Appointment object with the following fields:
	•	Appointment Key → Appointment.id
	•	Start date/time → Appointment.start
	•	End date/time → Appointment.end
	•	Location → Appointment.participant.actor → Location
	•	Patient → Appointment.participant.actor → Patient
	•	Clinician → Appointment.participant.actor → Practitioner
	•	Return appropriate error codes for:
	•	Empty response
	•	Key attributes mismatch
	•	Response timeout
	•	Errors from Meddbase API
	•	Unavailable Meddbase API
	•	Unavailable Google FHIR Store
	•	Invalid or no translation found in the FHIR Store

User Story 2: Finalize Booking

As a healthcare provider system,
I want to use the proposed appointment to book the appointment via Meddbase’s /bookProposedAppointment API,
So that I can finalize bookings and ensure consistency with FHIR standards.

Acceptance Criteria:
	•	Use the previously retrieved proposed appointment and invoke Meddbase’s /bookProposedAppointment API to finalize the booking.
	•	Ensure the booking process uses the Google FHIR Store for code system translations.
	•	Return appropriate error codes for:
	•	Booking failure
	•	Empty response
	•	Response timeout
	•	Errors from Meddbase API
	•	Unavailable Meddbase API
	•	Unavailable Google FHIR Store
	•	Invalid or no translation found in the FHIR Store

Tech Notes:
	•	Ensure all API calls are resilient with exponential backoff retries for failed requests (as already implemented for other endpoints).

These refined stories break down the requirements into manageable sections while maintaining clarity and focus on key functionalities.
