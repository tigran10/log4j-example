// build.gradle

plugins {
    alias(Libs.plugins.lombok) apply false
    alias(Libs.plugins.sonarqube) apply false
    id 'jacoco-report-aggregation' apply false
    alias(Libs.plugins.gcpArtifactRegistry) apply false
}

allprojects {
    apply plugin: 'idea'

    group = "${group}"
    version = libs.versions.version.get()

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven {
            url = uri("${gcpMavenRepoProtocol}://${gcpRegion}-maven.pkg.dev/${gcpArtifactRegistryProjectId}/${gcpMavenRepo}")
        }
    }
}

// Modular configurations for specific tools
apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/sonarqube.gradle"
apply from: "$rootDir/gradle/publishing.gradle"

// Filtered class directories logic
import helpers.GradleUtils

def filteredClassDirs = GradleUtils.filterClassDirectories(
    project,
    '**/*Controller.class', // Include pattern
    [
        '**/App.class',
        '**/Config.class',
        'config/**',
        '**/ExceptionHandler.class',
        '**/Dto.class',
        '**/Enum.class',
        '**/Converter.class',
        '**/Filter.class',
        '**/Mapper.class',
        '**/MapperImpl.class',
        '**/Exception.class',
        '**/spectrum/**',
        '**/dentally/**'
    ] // Exclude patterns
)

//build.gradle2
plugins {
    alias(Libs.plugins.lombok) apply false
    alias(Libs.plugins.sonarqube) apply false
    alias(Libs.plugins.gcpArtifactRegistry) apply false
}

allprojects {
    apply plugin: 'idea'

    group = "${group}"
    version = libs.versions.version.get()

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven {
            url = uri("${gcpMavenRepoProtocol}://${gcpRegion}-maven.pkg.dev/${gcpArtifactRegistryProjectId}/${gcpMavenRepo}")
        }
    }
}

// Modular configurations
apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/sonarqube.gradle"
apply from: "$rootDir/gradle/publishing.gradle"

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(libs.versions.java.get())
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs.add('-parameters')
    }
}

// Set up filtered directories for tasks that require them (example: JaCoCo or others)
tasks.register('useFilteredClassDirs') {
    doLast {
        println "Filtered Class Directories: ${filteredClassDirs.files}"
    }
}

classDirectories.setFrom(filteredClassDirs)

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(libs.versions.java.get())
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs.add('-parameters')
    }
}


// gradle/jacoco.gradle
// Configure JaCoCo tool version
jacoco {
    toolVersion = libs.versions.jacocoTool.get()
}

// Define test and JaCoCo tasks
test {
    useJUnitPlatform {
        excludeEngines 'junit-vintage'
    }
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

tasks.register('jacocoRootCoverageVerification', JacocoCoverageVerification) {
    violationRules {
        rule {
            limit {
                minimum = 0.8 // 80% coverage
            }
        }
    }
}

tasks.register('jacocoRootCoverageAggregatedReport', JacocoReport) {
    subprojects.each { subproject ->
        if (subproject.tasks.findByName('jacocoTestReport')) {
            dependsOn subproject.jacocoTestReport
            executionData fileTree(dir: subproject.layout.buildDirectory.dir('jacoco').get().asFile, include: '**/*.exec')
        }
    }

    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
}

//jacoco2.gradle
tasks.register('jacocoRootCoverageReport', JacocoReport) {
    dependsOn subprojects.collect { it.tasks.withType(Test) }

    executionData.setFrom(
        fileTree(dir: "$buildDir") {
            include '**/*.exec'
        }
    )

    classDirectories.setFrom(subprojects.collect {
        fileTree(dir: "${it.buildDir}/classes/java/main") {
            include '**/*Controller.class'
            exclude(
                '**/App.class',
                '**/Config.class',
                'config/**',
                '**/ExceptionHandler.class',
                '**/Dto.class',
                '**/Enum.class',
                '**/Converter.class',
                '**/Filter.class',
                '**/Mapper.class',
                '**/MapperImpl.class',
                '**/Exception.class',
                '**/spectrum/**',
                '**/dentally/**'
            )
        }
    })

    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
    }
}

//  gradle/sonarqube.gradle
sonar {
    properties {
        // Load all properties from sonar.properties
        def loadSonarProperties = {
            def sonarProps = new Properties()
            file("$rootDir/sonar.properties").withInputStream { stream ->
                sonarProps.load(stream)
            }
            return sonarProps
        }
        def sonarProps = loadSonarProperties()
        sonarProps.each { key, value ->
            property key, value
        }

        // Include all subprojects dynamically
        property "sonar.modules", subprojects.collect { it.name }.join(',')

        // Configure JaCoCo report paths for each subproject
        subprojects.each { subproject ->
            property "sonar.${subproject.name}.sonar.projectBaseDir", subproject.projectDir
            property "sonar.${subproject.name}.sonar.jacoco.reportPaths", "${subproject.buildDir}/jacoco/test.exec"
        }
    }
}

// gradle/publishing.gradle

def publishableModules = [
    ':bootstrap',
    ':lib:ehr-client',
    ':lib:meddbase-client',
    ':lib:spectrum-client',
    ':lib:dentally-client'
]

if (publishableModules.contains(project.path)) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                afterEvaluate { project ->
                    artifactId = project.archivesBaseName
                }
                suppressPomMetadataWarningsFor('testFixturesApiElements')
                suppressPomMetadataWarningsFor('testFixturesRuntimeElements')
                pom {
                    withXml {
                        def dependencies = asNode().dependencies[0]
                        if (dependencies) {
                            dependencies.children().removeAll { dep ->
                                dep.groupId.text() == project.group && dep.artifactId.text() == project.archivesBaseName
                            }
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "${gcpMavenRepo}"
                url = uri("${gcpMavenRepoProtocol}://${gcpRegion}-maven.pkg.dev/${gcpArtifactRegistryProjectId}/${gcpMavenRepo}")
            }
        }

        // Optionally disable publishing
        if (project.hasProperty('publishToGcpMaven') && !project.publishToGcpMaven.toBoolean()) {
            tasks.withType(PublishToMavenRepository).matching { it.repository.name == "${gcpMavenRepo}" }.all {
                enabled = false
            }
        }
    }
}


//  buildSrc/src/main/groovy/helpers/GradleUtils.groovy:
package helpers

import org.gradle.api.Project
import org.gradle.api.file.FileTree

class GradleUtils {
    /**
     * Load properties from a file.
     *
     * @param file the properties file
     * @return a Properties object
     */
    static Properties loadProperties(File file) {
        def props = new Properties()
        file.withInputStream { stream ->
            props.load(stream)
        }
        return props
    }

    /**
     * Filters class directories for specific patterns.
     *
     * @param project the Gradle project
     * @param includePattern the pattern to include (e.g., '**/*Controller.class')
     * @param excludePatterns list of patterns to exclude
     * @return a FileTree of filtered class directories
     */
    static FileTree filterClassDirectories(Project project, String includePattern, List<String> excludePatterns) {
        def filteredClassDirs = project.files() // Start with an empty collection
        project.subprojects.each { subproject -> // Iterate over subprojects
            def classDir = subproject.layout.buildDirectory.dir('classes/java/main').getOrNull()?.asFile
            if (classDir?.exists()) { // Check if the directory exists
                filteredClassDirs += project.fileTree(
                    dir: classDir,
                    include: includePattern,
                    exclude: excludePatterns
                )
            }
        }
        return filteredClassDirs
    }
}


//java

package helpers;

import org.gradle.api.Project;
import org.gradle.api.file.FileTree;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;
import java.util.Properties;

public class GradleUtils {

    /**
     * Load properties from a file.
     *
     * @param file the properties file
     * @return a Properties object
     * @throws IOException if the file cannot be read
     */
    public static Properties loadProperties(File file) throws IOException {
        Properties props = new Properties();
        try (FileInputStream stream = new FileInputStream(file)) {
            props.load(stream);
        }
        return props;
    }

    /**
     * Filters class directories for specific patterns.
     *
     * @param project       the Gradle project
     * @param includePattern the pattern to include (e.g., "**/*Controller.class")
     * @param excludePatterns list of patterns to exclude
     * @return a FileTree of filtered class directories
     */
    public static FileTree filterClassDirectories(Project project, String includePattern, List<String> excludePatterns) {
        FileTree filteredClassDirs = project.files(); // Start with an empty collection
        project.getSubprojects().forEach(subproject -> {
            File classDir = subproject.getLayout().getBuildDirectory().dir("classes/java/main").getAsFile().orNull();
            if (classDir != null && classDir.exists()) { // Check if the directory exists
                filteredClassDirs.plus(project.fileTree(classDir, spec -> {
                    spec.include(includePattern);
                    excludePatterns.forEach(spec::exclude);
                }));
            }
        });
        return filteredClassDirs;
    }
}
