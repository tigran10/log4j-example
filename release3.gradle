// release.gradle

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.15.4'
    id 'com.google.cloud.tools.jib' version '3.3.1'
}

scmVersion {
    versionIncrementer 'incrementPatch' // Default to incrementing patch for new tags (e.g., 1.0.1)
    
    tag {
        prefix = 'v' // Tags will look like v1.0.0
    }

    branchVersionSuffix = { branchName ->
        if (branchName.startsWith("feature/")) {
            "-${branchName.replace("feature/", "")}-SNAPSHOT"
        } else if (branchName.startsWith("bugfix/")) {
            "-${branchName.replace("bugfix/", "")}-SNAPSHOT"
        } else if (branchName.startsWith("hotfix/")) {
            "-${branchName.replace("hotfix/", "")}-SNAPSHOT"
        } else {
            "-SNAPSHOT"
        }
    }

    nextVersion {
        // Logic for calculating the next version if no tags exist
        suffix = 'SNAPSHOT'
        initialVersion = '1.0.0'
    }
}

tasks.register('publishArtifacts') {
    dependsOn 'build'
    doLast {
        println "Publishing JAR to artifact repository"
        // Add your publishing logic here
    }
}

tasks.register('publishDocker') {
    dependsOn 'build'
    doLast {
        println "Publishing Docker image"
        exec {
            commandLine 'gradle', 'jib'
        }
    }
}

tasks.register('createGitHubRelease') {
    doLast {
        println "Creating GitHub release"
        // Add GitHub release logic if not using actions
    }
}


jib {
    from {
        image = 'gcr.io/distroless/java21'
    }
    to {
        image = "${gcpRegion}-docker.pkg.dev/${gcpArtifactRegistryProjectId}/${gcpDockerRepo}/${rootProjectName}:${project.version}"
        tags = [project.version, "latest"]
    }
    container {
        ports = ['8080']
        labels = [
            "build.version": project.version,
            "branch": "git rev-parse --abbrev-ref HEAD".execute().text.trim()
        ]
    }
}

name: CI/CD for Master/Main

on:
  push:
    branches:
      - master
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and Test
        run: |
          ./gradlew clean build -Penv=production
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"

      - name: Verify Build
        run: |
          ls build/libs/

      - name: Release Version
        run: |
          ./gradlew release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show Current Version
        run: |
          ./gradlew currentVersion

      - name: Publish Artifacts
        run: |
          ./gradlew publishArtifacts

      - name: Publish Docker Image
        run: |
          ./gradlew publishDocker

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/libs/*.jar
          tag_name: ${{ github.ref_name }}
          body: "Release notes can be added here."


name: CI for Non-Master Branches

on:
  push:
    branches-ignore:
      - master
      - main

  pull_request:
    branches:
      - master
      - main

jobs:
  non-master:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Calculate Version
        run: |
          ./gradlew currentVersion

      - name: Build and Test
        run: |
          ./gradlew clean build -Penv=ci
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"

      - name: Publish Docker Image
        run: |
          VERSION=$(./gradlew -q currentVersion)
          BRANCH_NAME=$(echo "${{ github.head_ref || github.ref_name }}" | sed 's/refs\/heads\///' | tr '/' '-')
          ./gradlew jib -Djib.to.image=${{ secrets.GCP_DOCKER_REPO }}/ci-${BRANCH_NAME}:${VERSION}  





  - name: Generate Release Notes
        id: release_notes
        run: |
          echo "## Release v${{ steps.current_version.outputs.released-version }}" > release_notes.md
          echo "Released on $(date '+%Y-%m-%d')" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🚀 Commits Merged into Master:" >> release_notes.md
          if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            git log $(git describe --tags --abbrev=0)..HEAD --grep="Merge pull request #" --pretty=format:"- %s" >> release_notes.md
          else
            git log --pretty=format:"- %s" >> release_notes.md
          fi
          echo "" >> release_notes.md
          echo "### 🐳 Docker Image:" >> release_notes.md
          echo "- myrepo/myapp:${{ steps.current_version.outputs.released-version }}" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: bootstrap/build/libs/*.jar
          body_path: release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}                    
